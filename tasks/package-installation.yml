---
# file: tasks/package-installation.yml

- name: 'check if {{ aem_package }} have been already installed'
  uri:
    url: '{{ aem_rest_link }}/crx/packmgr/service.jsp?cmd=ls'
    user: '{{ aem_admin_login }}'
    password: '{{ aem_admin_password }}'
    force_basic_auth: true
    return_content: true
  register: packageList

- name: 'make a decision to install {{ aem_package }}'
  set_fact:
    packageInstall: true
  when: aem_package not in packageList.content
  notify:
  - stop aem
  - start aem
  - load aem
- meta: flush_handlers

- name: 'make a decision to not install {{ aem_package }}'
  set_fact:
    packageInstall: false
  when: aem_package in packageList.content

- block:
  - name: 'ensure that {{ aem_package }} package is downloaded'
    get_url:
      url: '{{ web_transport_common_url }}/packages/{{ aem_package }}.zip'
      dest: '/tmp/{{ aem_package }}.zip'
      owner: '{{ aem_user }}'
      group: '{{ aem_user }}'
      mode: 0640
    when:  download_transport == 'web'
  - name: Copy artifact to destination
    # become: true
    copy:
      src: '{{ web_transport_common_url }}/packages/{{ aem_package }}.zip'
      dest: '/tmp/{{ aem_package }}.zip'
      owner: '{{ aem_user }}'
      group: '{{ aem_user }}'
      mode: 0640
    register: file_downloaded
    retries: 5
    delay: 2
    until: file_downloaded is succeeded
    when:  download_transport == 'local'

  - name: 'send request to upload and install {{ aem_package }}'
    shell: "curl -u {{ aem_admin_login }}:{{ aem_admin_password }} -F file=@'/tmp/{{ aem_package }}.zip' -F na\
me='{{ aem_package }}' -F force=true -F install=true -F recursive=true {{ aem_rest_link }}/crx/packmgr/service.jsp"
    notify:
    - wait 5 minutes
    - load aem
    changed_when: true
    tags:
      - skip_ansible_lint
  - meta: flush_handlers
  - name: 'remove zip with {{ aem_package }} from temporary folder'
    file:
      path: '/tmp/{{ aem_package }}.zip'
      state: absent
  when: packageInstall
  become: true
