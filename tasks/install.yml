---
# file: tasks/install.yml

- name: "ensure that {{ cq_file_name }} file is downloaded"
  get_url:
    url: '{{ ftp_server_link }}/{{ aem_version }}/aem.jar'
    dest: '{{ aem_home }}/{{ cq_file_name }}.jar'
    owner: '{{ aem_user }}'
    group: '{{ aem_user }}'
    mode: 0640

- name: ensure that AEM licence file is downloaded
  get_url:
    url: '{{ ftp_server_link }}/licenses/{{ aem_version }}/license.properties'
    dest: '{{ aem_home }}/license.properties'
    owner: '{{ aem_user }}'
    group: '{{ aem_user }}'
    mode: 0640

- name: extract AEM jar file if crx-quickstart folder doesn't exist
  command: "java -jar {{ aem_home }}/{{ cq_file_name }}.jar -unpack"
  args:
    creates: '{{ aem_home }}/crx-quickstart/bin'
    chdir: '{{ aem_home }}'

- name: ensure that all permissions for home aem dir is correct
  file:
    path: '{{ aem_home }}/crx-quickstart'
    state: directory
    owner: '{{ aem_user }}'
    group: '{{ aem_user }}'
    recurse: True

- name: ensure that subsys directory exists
  file:
    path: '/var/lock/subsys'
    state: directory
    recurse: True

- name: creating systemd script for AEM jar file selector
  template:
    src: jarfile-selector.service.j2
    dest: '/etc/systemd/system/jarfile-selector-{{ aem_service_name }}.service'
    owner: root
    group: root
    mode: 0644

- name: creating systemd script for AEM instance
  template:
    src: aem.service.j2
    dest: '/usr/lib/systemd/system/{{ aem_service_name }}.service'
    owner: root
    group: root
    mode: 0644

- name: fix start script for 5.5
  template:
    src: start5.5.j2
    dest: '{{ aem_home }}/crx-quickstart/bin/start'
    owner: '{{ aem_user }}'
    group: '{{ aem_user }}'
    mode: 0755
  when: "aem_version == '5.5' or aem_version == 5.5"

- name: start and enable aem service
  service:
    name: '{{ aem_service_name }}'
    enabled: True
    state: started
  notify:
  - firstload aem
- meta: flush_handlers

- block:
  - name: change user password (step 1)
    uri:
      url: '{{ aem_rest_link }}/bin/querybuilder.json?path=/home/users&1_property=rep:principalName&1_property.value={{ aem_admin_login }}&p.limit=-1'
      method: GET
      user: '{{ aem_admin_login }}'
      password: '{{ aem_admin_password }}'
      force_basic_auth: True
      return_content: True
      ignore_errors: True
    register: userCRXPath
  - name: change user password (step 2)
    uri:
      url: '{{ aem_rest_link }}/crx/explorer/ui/setpassword.jsp'
      method: POST
      user: '{{ aem_admin_login }}'
      password: '{{ aem_admin_password }}'
      force_basic_auth: True
      body: "plain={{ aem_new_admin_password }}&verify={{ aem_new_admin_password }}&old={{ aem_admin_password }}&P\
ath={{ userCRXPath.json.hits[0].path }}"
      ignore_errors: True
  - name: set new password
    set_fact:
      aem_admin_password: '{{ aem_new_admin_password }}'
  when: aem_change_default_admin_password

- name: fix AEM bug with nosamplecontent
  uri:
    url: '{{ aem_rest_link }}/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet'
    method: POST
    user: '{{ aem_admin_login }}'
    password: '{{ aem_admin_password }}'
    force_basic_auth: True
    follow_redirects: safe
    body: 'jcr:primaryType=sling:OsgiConfig&alias=/crx/server&dav.create-absolute-uri=true&dav.create-absolute-uri@TypeHint=Boolean'
    status_code: 201, 200, 500
    ignore_errors: True
  when: aem_no_sample_content
