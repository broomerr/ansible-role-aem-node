---
# file: tasks/install.yml

- name: 'ensure that {{ cq_file_name }} file is downloaded'
  get_url:
    url: '{{ ftp_server_link }}/{{ aem_version }}/aem.jar'
    dest: '{{ aem_home }}/{{ cq_file_name }}.jar'
    owner: '{{ aem_user }}'
    group: '{{ aem_user }}'
    mode: 0640
  become: True

- name: ensure that AEM licence file is downloaded
  get_url:
    url: '{{ ftp_server_link }}/licenses/{{ aem_version }}/license.properties'
    dest: '{{ aem_home }}/license.properties'
    owner: '{{ aem_user }}'
    group: '{{ aem_user }}'
    mode: 0640
  become: True

- name: extract AEM jar file if crx-quickstart folder doesn't exist
  command: 'java -jar {{ aem_home }}/{{ cq_file_name }}.jar -unpack'
  args:
    creates: '{{ aem_home }}/crx-quickstart/bin'
    chdir: '{{ aem_home }}'
  become: True

- name: ensure that all permissions for home aem dir is correct
  file:
    path: '{{ aem_home }}/crx-quickstart'
    state: directory
    owner: '{{ aem_user }}'
    group: '{{ aem_user }}'
    recurse: True
  become: True

- name: ensure that subsys directory exists
  file:
    path: '/var/lock/subsys'
    state: directory
    recurse: True
  become: True

- name: find jarfile
  find:
    paths: '{{ aem_home }}/crx-quickstart/app/'
    patterns: '*.jar'
  register: jarfile

- name: creating file with jarfile
  copy:
    dest: '{{ aem_home }}/aem_jar_file'
    content: "JARFILE={{ jarfile['files'][0]['path'] | replace('{{ aem_home }}','') }}"
  become: True

- name: debug
  debug:
    msg: "JARFILE={{ jarfile['files'][0]['path'] | replace('{{ aem_home }}','') }}"

- name: creating systemd script for AEM instance
  template:
    src: aem.service.j2
    dest: '/etc/systemd/system/{{ aem_service_name }}.service'
    owner: root
    group: root
    mode: 0644
  become: True

- name: start and enable aem service
  service:
    name: '{{ aem_service_name }}'
    enabled: True
    state: started
  notify:
  - firstload aem
  become: True

- meta: flush_handlers

- block:
  - name: change admin password
    aem_password:
      id: '{{ aem_admin_login }}'
      old_password: '{{ aem_admin_password }}'
      new_password: '{{ aem_new_admin_password }}'
      host: 'http://localhost'
      port: '{{ aem_instance_port }}'

  - name: set new password
    set_fact:
      aem_admin_password: '{{ aem_new_admin_password }}'
  when: aem_change_default_admin_password

- name: fix AEM bug with nosamplecontent
  uri:
    url: '{{ aem_rest_link }}/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet'
    method: POST
    user: '{{ aem_admin_login }}'
    password: '{{ aem_admin_password }}'
    force_basic_auth: True
    follow_redirects: safe
    body: 'jcr:primaryType=sling:OsgiConfig&alias=/crx/server&dav.create-absolute-uri=true&dav.create-absolute-uri@TypeHint=Boolean'
    status_code: 201, 200, 500
    ignore_errors: True
  when: aem_no_sample_content
