---
- name: 'ensure that {{ cq_file_name }} file is downloaded (s3 transport)'
  aws_s3:
    bucket: '{{ transport_s3_bucket }}'
    object: '{{ aem_transport_s3_path }}'
    dest: '{{ aem_home }}/{{ cq_file_name }}.jar'
    aws_access_key: '{{ transport_s3_aws_access_key }}'
    aws_secret_key: '{{ transport_s3_aws_secret_key }}'
    mode: get
    overwrite: different
    ignore_nonexistent_bucket: true
  retries: 5
  delay: 2
  become: true

- name: 'protecting aem jar file'
  file:
    path: '{{ aem_home }}/{{ cq_file_name }}.jar'
    owner: '{{ aem_user }}'
    group: '{{ aem_user }}'
    mode: '0640'
  become: true

- name: 'ensure that AEM licence file is downloaded (s3 transport)'
  aws_s3:
    bucket: '{{ transport_s3_bucket }}'
    object: '{{ license_transport_s3_path }}'
    dest: '{{ aem_home }}/license.properties'
    aws_access_key: '{{ transport_s3_aws_access_key }}'
    aws_secret_key: '{{ transport_s3_aws_secret_key }}'
    mode: get
    overwrite: different
    ignore_nonexistent_bucket: true
  retries: 5
  delay: 2
  become: true

- name: 'protecting license file'
  file:
    path: '{{ aem_home }}/license.properties'
    owner: '{{ aem_user }}'
    group: '{{ aem_user }}'
    mode: '0640'
  become: true

- name: 'ensure that AEM SP is downloaded (s3 transport)'
  block:
    - name: download AEM SP zip file
      aws_s3:
        bucket: '{{ transport_s3_bucket }}'
        object: '{{ service_pack_s3_path }}'
        dest: '{{ aem_install_dir }}/{{ service_pack_s3_path.split("/")[-1] }}'
        aws_access_key: '{{ transport_s3_aws_access_key }}'
        aws_secret_key: '{{ transport_s3_aws_secret_key }}'
        mode: get
        overwrite: different
        ignore_nonexistent_bucket: true
      retries: 5
      delay: 2

    - name: 'protecting SP file'
      file:
        path: '{{ aem_install_dir }}/{{ service_pack_s3_path.split("/")[-1] }}'
        owner: '{{ aem_user }}'
        group: '{{ aem_user }}'
        mode: '0640'
      become: true
  when: service_pack_s3_path | length > 0
  become: true

- name: 'ensure that jolokia is downloaded (s3 transport)'
  aws_s3:
    bucket: '{{ transport_s3_bucket }}'
    object: '{{ jolokia_transport_s3_path }}'
    dest: '{{ aem_home }}/jolokia-jvm-1.6.2-agent.jar'
    aws_access_key: '{{ transport_s3_aws_access_key }}'
    aws_secret_key: '{{ transport_s3_aws_secret_key }}'
    mode: get
    overwrite: different
    ignore_nonexistent_bucket: true
  retries: 5
  delay: 2
  when: jolokia_agent is defined
  become: true
